* change "all_data" key to "overall metric"

go build -v -o ./benchmark.bin && ./benchmark.bin


* auto open web view after server up instead of timeout
* benchmark call should accept a name or tittle & same should be returned to the metric dump & response

* try, to create benchmark runner client & to make a decentralized client, so we can achieve unique IP address
benchmark server should distribute/assign size & time of API call(could be real time or planned) to the benchmark runner client
& benchmark client should be scalable in a flexible way
i think testing can be done using docker,
& can be released as docker image and the code will be mounted to host drive, so user can write api calls,payload etc


** Remote bench mark execution
1.  - run "CreateAPIRequest" on client side
    - collect all the dynamically generated payloads
2.  - call the "APIReq" on remote server through gRPC
    - distribute load on servers, each server should have concurrency/number of benchmark server
    - remote servers each iteration should be controlled by client, since each iteration should be run parallely to achieve total concurrency specified
    condition: delay from server to client should be <=100ms
        get time from all server, s1: 6:30:100, s2: 6:30:900, s3: 6:31:900, s4: 9:20:900
        so all iteration should start from each server with 2 second gap,
        like start from,  s1:6:32, s2:6:32, s3:6:33, 9:22
        will think of ms optimization later
        ex:
            total concurrency 1000, 4 servers
            server 1,2,4,5 - concurrency 2500
            should run as,
            server 1, iteration 1
            server 2, iteration 1
            & same for server 3 & 4 also
            once 1st iteration finishes,get ACK from all servers,
            then all server should start next iteration simultaneously
    - collect all the response data
    - send back to client as gRPC response
3.  - client loop through all response so it can handle response_interceptor on client side code
4.  - tool should be able to run as both standalone & also as distributed
5.  - Response response_interceptor from "APIReq" will be moved outside since "APIReq" should be run independent of client
6.  - Expected issue,
    - memory conception will be more since server have to store responses from request & send it back to client
