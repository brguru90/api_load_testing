* need to measure request per seconds
   - total request connected in a second
   - total response sent in second
   - total request sent & same is processed in that second

   both average per each iteration & overall iteration

* need to add millisecond representaion of delay along with seconds in "all_data"
* need to add status code in perecentage along with actual count in "all_data"
* change "all_data" key to "overall metric"
*  Bandwidth (kilo bytes in/out per second)
   1. total request payload sent in size
   2. total response payload recived in size
*  prepare payload ahead of time [ optional / but important ] 
   the "payload_generator_callback" generator should be called & store the payloads before start sending request
   so any computational intensive task will not effect bench mark metrics
   & measuring Bandwidth will also cause less effect/error on metrics


   append to queue
   {
      request_id:number,
      status:[
         {
            sent:time,
            connected:time,
            proccessed:time,
         }
      ]
   }

   iterate from api benchmark start time to end time, & increase second by one,
   get the average count for request within second & average over all iterations
   

   clear queue for that api


   0-0,999
   1-1000,1999
   2-2000,2999
   3-3000,3999
   3000%1000=0
   3001%1000=1
   3999%1000=999
